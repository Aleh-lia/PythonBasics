print('Задание 1')

"""
1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на
русский язык. Например:
>>> num_translate("one")
"один"
>>> num_translate("eight")
"восемь"
Если перевод сделать невозможно, вернуть None. Подумайте, как и где лучше хранить
информацию, необходимую для перевода: какой тип данных выбрать, в теле функции или
снаружи.
"""

number = {
    "zero": "ноль",
    "one": "один",
    "two": "два",
    "three": "три",
    "four": "четыри",
    "five": "пять",
    "six": "шесть",
    "seven": "семь",
    "eight": "восемь",
    "nine": "девять",
    "ten": "десять"
}

def num_translate():

    return number.get(word_num)

word_num = (input('Напиши число от 0 до 10 на английском: '))

print(num_translate())


print(f"{'':-^90}")


print('Задание 2')

"""
2. *(вместо задачи 1) Доработать предыдущую функцию в num_translate_adv(): реализовать
корректную работу с числительными, начинающимися с заглавной буквы — результат тоже
должен быть с заглавной. Например:
>>> num_translate_adv("One")
"Один"
>>> num_translate_adv("two")
"два"
"""

print(f"{'':-^90}")


print('Задание 3')

"""
3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и
возвращающую словарь, в котором ключи — первые буквы имён, а значения — списки,
содержащие имена, начинающиеся с соответствующей буквы. Например:
>>> thesaurus("Иван", "Мария", "Петр", "Илья")
{
"И": ["Иван", "Илья"],
"М": ["Мария"],
"П": ["Петр"]
}
Подумайте: полезен ли будет вам оператор распаковки? Как поступить, если потребуется
сортировка по ключам? Можно ли использовать словарь в этом случае?
"""


def thesaurus(*names):
    out_dict = {}
    for name in names:
        out_dict.setdefault(name[0], [])
        out_dict[name[0]].append(name)
    print(out_dict)



(thesaurus("Эльдар", "Мария", "Иван", "Катя", "Эвелина", "Max"))

print(f"{'':-^90}")


print('Задание 4')

""" 
4. *(вместо задачи 3) Написать функцию thesaurus_adv(), принимающую в качестве аргументов
строки в формате «Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы
фамилий, а значения — словари, реализованные по схеме предыдущего задания и содержащие
записи, в которых фамилия начинается с соответствующей буквы. Например:
>>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр
Алексеев", "Илья Иванов", "Анна Савельева")
{
"А": {
"П": ["Петр Алексеев"]
},
"И": {
"И": ["Илья Иванов"]
},
"С": {
"И": ["Иван Сергеев", "Инна Серова"],
"А": ["Анна Савельева"]
}
}
Как поступить, если потребуется сортировка по ключам?
"""

print(f"{'':-^90}")


print('Задание 5')
"""
5. Реализовать функцию get_jokes(), возвращающую n шуток, сформированных из трех
случайных слов, взятых из трёх списков (по одному из каждого):
nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
adjectives = ["веселый", "яркий", "зеленый", "утопичный",
"мягкий"]
Например:
>>> get_jokes(2)
["лес завтра зеленый", "город вчера веселый"]
Документировать код функции.
Сможете ли вы добавить еще один аргумент — флаг, разрешающий или запрещающий повторы
слов в шутках (когда каждое слово можно использовать только в одной шутке)? Сможете ли вы
сделать аргументы именованными?

Задачи со * предназначены для продвинутых учеников, которым мало сделать обычное задание.
"""


import random

nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
adjectives = ["веселый", "яркий", "зеленый", "утопичный",
"мягкий"]


def get_jokes(num):
    joke_list = []
    for i in range(num):
        any_nouns = random.choice(nouns)
        any_adverbs = random.choice(adverbs)
        any_abjectives = random.choice(adjectives)
        joke_list.append(f'{any_nouns} {any_adverbs} {any_abjectives}')
    return joke_list


num = (int(input('Количество шуток))): ')))
print(get_jokes(num))

nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
adjectives = ["веселый", "утопичный", "мягкий"]

def get_jokes_adv(num, repeats=True):
    joke_list = []


    if not repeats:
        if num > min(len(nouns), len(adverbs), len(adjectives)):
            return 'Uselessly'
        else:
            random.shuffle(nouns)
            random.shuffle(adverbs)
            random.shuffle(adjectives)
            for i in range(num):
                joke_list.append(f'{nouns[i]} {adverbs[i]} {adjectives[i]}')

    else:
        for i in range(num):
            any_nouns = random.choice(nouns)
            any_adverbs = random.choice(adverbs)
            any_abjectives = random.choice(adjectives)
            joke_list.append(f'{any_nouns} {any_adverbs} {any_abjectives}')
    return joke_list

num = (int(input('Количество шуток))): ')))
replay = (int(input('Повторять элементы или нет(Да=1, Нет=0): ')))

print(get_jokes_adv(num, replay))